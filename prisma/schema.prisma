generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String   @default("customer") // "customer", "barber", "admin"
  firstName String?
  lastName  String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  barberProfile BarberProfile?
  bookings    Booking[]
  reviews     Review[]
}

model BarberProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  businessName String
  bio         String?
  location    Json     // { lat: Float, lng: Float }
  hourlyRate  Float?
  portfolio   String[] // Array of Cloudflare R2 image URLs
  workingHours Json   // { Monday: { start: "09:00", end: "17:00" }, ... }
  services    Service[]
  bookings    Booking[]
  reviews     Review[]
}

model Service {
  id        String   @id @default(uuid())
  barberId  String
  barber    BarberProfile @relation(fields: [barberId], references: [id])
  name      String
  description String?
  price     Float
  duration  Int      // Minutes
  category  String   // "cut", "beard", "color", etc.
  bookings  Booking[]
}

model Booking {
  id          String   @id @default(uuid())
  customerId  String
  customer    User     @relation(fields: [customerId], references: [id])
  barberId    String
  barber      BarberProfile @relation(fields: [barberId], references: [id])
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  dateTime    DateTime
  status      String   @default("scheduled") // "scheduled", "completed", "canceled"
  paymentStatus String @default("pending") // "pending", "paid", "failed"
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payment     Payment?
  review      Review?
}

model Review {
  id          String   @id @default(uuid())
  customerId  String
  customer    User     @relation(fields: [customerId], references: [id])
  barberId    String
  barber      BarberProfile @relation(fields: [barberId], references: [id])
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id])
  rating      Int      // 1-5
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id          String   @id @default(uuid())
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id])
  amount      Float
  stripePaymentId String
  status      String   // "succeeded", "failed", "pending"
  createdAt   DateTime @default(now())
}