generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  BARBER
  ADMIN
}

enum BookingStatus {
  PENDING_CONFIRMATION
  PENDING_PAYMENT
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  role            UserRole       @default(CUSTOMER)
  firstName       String?
  lastName        String?
  phone           String?
  phoneNumber     String?
  address         String?
  isEmailVerified Boolean        @default(false)
  emailNotifications Boolean     @default(true)
  smsNotifications   Boolean     @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  barberProfile   BarberProfile?
  bookings        Booking[]
  reviews         Review[]
}

model BarberProfile {
  id               String    @id @default(uuid())
  userId           String    @unique
  businessName     String
  bio              String?
  description      String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  phoneNumber      String?
  website          String?
  instagramHandle  String?
  location         Json
  latitude         Float?
  longitude        Float?
  hourlyRate       Float?
  portfolio        String[]
  portfolioImages  String[]
  workingHours     Json
  businessHours    Json?
  isActive         Boolean   @default(true)
  rating           Float     @default(0)
  reviewCount      Int       @default(0)
  specialties      String[]
  amenities        String[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])
  bookings         Booking[]
  reviews          Review[]
  services         Service[]
}

model Service {
  id          String        @id @default(uuid())
  barberId    String
  name        String
  description String?
  price       Float
  duration    Int
  type        String
  category    String
  tags        String[]
  requirements String?
  preparation String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bookings    Booking[]
  barber      BarberProfile @relation(fields: [barberId], references: [id])
}

model Booking {
  id                 String        @id @default(uuid())
  userId             String
  customerId         String
  barberId           String
  serviceId          String
  scheduledTime      DateTime
  duration           Int
  totalPrice         Float
  totalAmount        Float
  status             BookingStatus @default(PENDING_CONFIRMATION)
  paymentStatus      PaymentStatus @default(PENDING)
  notes              String?
  cancellationReason String?
  cancelledAt        DateTime?
  completedAt        DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  barber             BarberProfile @relation(fields: [barberId], references: [id])
  customer           User          @relation(fields: [customerId], references: [id])
  service            Service       @relation(fields: [serviceId], references: [id])
  payment            Payment?
  review             Review?
}

model Review {
  id               String        @id @default(uuid())
  customerId       String
  barberId         String
  bookingId        String        @unique
  rating           Int
  comment          String?
  tags             String[]
  photos           String[]
  isVerified       Boolean       @default(false)
  isPublic         Boolean       @default(true)
  barberResponse   String?
  barberResponseAt DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  barber           BarberProfile @relation(fields: [barberId], references: [id])
  booking          Booking       @relation(fields: [bookingId], references: [id])
  customer         User          @relation(fields: [customerId], references: [id])
}

model Payment {
  id              String        @id @default(uuid())
  bookingId       String        @unique
  amount          Float
  stripePaymentId String?
  status          PaymentStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  booking         Booking       @relation(fields: [bookingId], references: [id])
}
